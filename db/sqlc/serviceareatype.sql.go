// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: serviceareatype.sql

package db

import (
	"context"
)

const createServiceareatype = `-- name: CreateServiceareatype :one
INSERT INTO serviceareatypes (
    serviceareatype_name,
    serviceareatype_desc
) VALUES (
 $1, $2
)
RETURNING id, serviceareatype_name, serviceareatype_desc
`

type CreateServiceareatypeParams struct {
	ServiceareatypeName string `json:"serviceareatype_name"`
	ServiceareatypeDesc string `json:"serviceareatype_desc"`
}

func (q *Queries) CreateServiceareatype(ctx context.Context, arg CreateServiceareatypeParams) (Serviceareatype, error) {
	row := q.db.QueryRow(ctx, createServiceareatype, arg.ServiceareatypeName, arg.ServiceareatypeDesc)
	var i Serviceareatype
	err := row.Scan(&i.ID, &i.ServiceareatypeName, &i.ServiceareatypeDesc)
	return i, err
}

const deleteServiceareatype = `-- name: DeleteServiceareatype :exec
DELETE FROM serviceareatypes
WHERE id = $1
`

func (q *Queries) DeleteServiceareatype(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteServiceareatype, id)
	return err
}

const getServiceareatype0 = `-- name: GetServiceareatype0 :one
SELECT id, serviceareatype_name, serviceareatype_desc FROM serviceareatypes
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetServiceareatype0(ctx context.Context, id int64) (Serviceareatype, error) {
	row := q.db.QueryRow(ctx, getServiceareatype0, id)
	var i Serviceareatype
	err := row.Scan(&i.ID, &i.ServiceareatypeName, &i.ServiceareatypeDesc)
	return i, err
}

const getServiceareatype1 = `-- name: GetServiceareatype1 :one
SELECT id, serviceareatype_name, serviceareatype_desc FROM serviceareatypes
WHERE serviceareatype_name = $1 LIMIT 1
`

func (q *Queries) GetServiceareatype1(ctx context.Context, serviceareatypeName string) (Serviceareatype, error) {
	row := q.db.QueryRow(ctx, getServiceareatype1, serviceareatypeName)
	var i Serviceareatype
	err := row.Scan(&i.ID, &i.ServiceareatypeName, &i.ServiceareatypeDesc)
	return i, err
}

const listServiceareatypes = `-- name: ListServiceareatypes :many
SELECT id, serviceareatype_name, serviceareatype_desc FROM serviceareatypes
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListServiceareatypesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListServiceareatypes(ctx context.Context, arg ListServiceareatypesParams) ([]Serviceareatype, error) {
	rows, err := q.db.Query(ctx, listServiceareatypes, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Serviceareatype{}
	for rows.Next() {
		var i Serviceareatype
		if err := rows.Scan(&i.ID, &i.ServiceareatypeName, &i.ServiceareatypeDesc); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateServiceareatype = `-- name: UpdateServiceareatype :one
UPDATE serviceareatypes
SET serviceareatype_name = $2,
serviceareatype_desc = $3
WHERE id = $1
RETURNING id, serviceareatype_name, serviceareatype_desc
`

type UpdateServiceareatypeParams struct {
	ID                  int64  `json:"id"`
	ServiceareatypeName string `json:"serviceareatype_name"`
	ServiceareatypeDesc string `json:"serviceareatype_desc"`
}

func (q *Queries) UpdateServiceareatype(ctx context.Context, arg UpdateServiceareatypeParams) (Serviceareatype, error) {
	row := q.db.QueryRow(ctx, updateServiceareatype, arg.ID, arg.ServiceareatypeName, arg.ServiceareatypeDesc)
	var i Serviceareatype
	err := row.Scan(&i.ID, &i.ServiceareatypeName, &i.ServiceareatypeDesc)
	return i, err
}
