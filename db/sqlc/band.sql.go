// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: band.sql

package db

import (
	"context"
)

const createBand = `-- name: CreateBand :one
INSERT INTO bands (
    band_name,
    band_desc,
    size,
    start_freq,
    end_freq,
    tech_id
) VALUES (
 $1, $2, $3, $4, $5, $6
)
RETURNING id, band_name, band_desc, size, start_freq, end_freq, tech_id
`

type CreateBandParams struct {
	BandName  string `json:"band_name"`
	BandDesc  string `json:"band_desc"`
	Size      int64  `json:"size"`
	StartFreq int64  `json:"start_freq"`
	EndFreq   int64  `json:"end_freq"`
	TechID    int64  `json:"tech_id"`
}

func (q *Queries) CreateBand(ctx context.Context, arg CreateBandParams) (Band, error) {
	row := q.db.QueryRow(ctx, createBand,
		arg.BandName,
		arg.BandDesc,
		arg.Size,
		arg.StartFreq,
		arg.EndFreq,
		arg.TechID,
	)
	var i Band
	err := row.Scan(
		&i.ID,
		&i.BandName,
		&i.BandDesc,
		&i.Size,
		&i.StartFreq,
		&i.EndFreq,
		&i.TechID,
	)
	return i, err
}

const deleteBand = `-- name: DeleteBand :exec
DELETE FROM bands
WHERE id = $1
`

func (q *Queries) DeleteBand(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteBand, id)
	return err
}

const getBand0 = `-- name: GetBand0 :one
SELECT id, band_name, band_desc, size, start_freq, end_freq, tech_id FROM bands
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetBand0(ctx context.Context, id int64) (Band, error) {
	row := q.db.QueryRow(ctx, getBand0, id)
	var i Band
	err := row.Scan(
		&i.ID,
		&i.BandName,
		&i.BandDesc,
		&i.Size,
		&i.StartFreq,
		&i.EndFreq,
		&i.TechID,
	)
	return i, err
}

const getBand1 = `-- name: GetBand1 :one
SELECT id, band_name, band_desc, size, start_freq, end_freq, tech_id FROM bands
WHERE band_name = $1 LIMIT 1
`

func (q *Queries) GetBand1(ctx context.Context, bandName string) (Band, error) {
	row := q.db.QueryRow(ctx, getBand1, bandName)
	var i Band
	err := row.Scan(
		&i.ID,
		&i.BandName,
		&i.BandDesc,
		&i.Size,
		&i.StartFreq,
		&i.EndFreq,
		&i.TechID,
	)
	return i, err
}

const listBands = `-- name: ListBands :many
SELECT id, band_name, band_desc, size, start_freq, end_freq, tech_id FROM bands
WHERE tech_id = $3
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListBandsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
	TechID int64 `json:"tech_id"`
}

func (q *Queries) ListBands(ctx context.Context, arg ListBandsParams) ([]Band, error) {
	rows, err := q.db.Query(ctx, listBands, arg.Limit, arg.Offset, arg.TechID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Band{}
	for rows.Next() {
		var i Band
		if err := rows.Scan(
			&i.ID,
			&i.BandName,
			&i.BandDesc,
			&i.Size,
			&i.StartFreq,
			&i.EndFreq,
			&i.TechID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBand = `-- name: UpdateBand :one
UPDATE bands
SET band_name = $2,
band_desc = $3,
size = $4,
start_freq = $5,
end_freq = $6,
tech_id = $7
WHERE id = $1
RETURNING id, band_name, band_desc, size, start_freq, end_freq, tech_id
`

type UpdateBandParams struct {
	ID        int64  `json:"id"`
	BandName  string `json:"band_name"`
	BandDesc  string `json:"band_desc"`
	Size      int64  `json:"size"`
	StartFreq int64  `json:"start_freq"`
	EndFreq   int64  `json:"end_freq"`
	TechID    int64  `json:"tech_id"`
}

func (q *Queries) UpdateBand(ctx context.Context, arg UpdateBandParams) (Band, error) {
	row := q.db.QueryRow(ctx, updateBand,
		arg.ID,
		arg.BandName,
		arg.BandDesc,
		arg.Size,
		arg.StartFreq,
		arg.EndFreq,
		arg.TechID,
	)
	var i Band
	err := row.Scan(
		&i.ID,
		&i.BandName,
		&i.BandDesc,
		&i.Size,
		&i.StartFreq,
		&i.EndFreq,
		&i.TechID,
	)
	return i, err
}
