// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: area.sql

package db

import (
	"context"
)

const createArea = `-- name: CreateArea :one
INSERT INTO areas (
    area_name,
    area_desc
) VALUES (
 $1, $2
)
RETURNING id, area_name, area_desc
`

type CreateAreaParams struct {
	AreaName string `json:"area_name"`
	AreaDesc string `json:"area_desc"`
}

func (q *Queries) CreateArea(ctx context.Context, arg CreateAreaParams) (Area, error) {
	row := q.db.QueryRow(ctx, createArea, arg.AreaName, arg.AreaDesc)
	var i Area
	err := row.Scan(&i.ID, &i.AreaName, &i.AreaDesc)
	return i, err
}

const deleteArea = `-- name: DeleteArea :exec
DELETE FROM areas
WHERE id = $1
`

func (q *Queries) DeleteArea(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteArea, id)
	return err
}

const getArea0 = `-- name: GetArea0 :one
SELECT id, area_name, area_desc FROM areas
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetArea0(ctx context.Context, id int64) (Area, error) {
	row := q.db.QueryRow(ctx, getArea0, id)
	var i Area
	err := row.Scan(&i.ID, &i.AreaName, &i.AreaDesc)
	return i, err
}

const getArea1 = `-- name: GetArea1 :one
SELECT id, area_name, area_desc FROM areas
WHERE area_name = $1 LIMIT 1
`

func (q *Queries) GetArea1(ctx context.Context, areaName string) (Area, error) {
	row := q.db.QueryRow(ctx, getArea1, areaName)
	var i Area
	err := row.Scan(&i.ID, &i.AreaName, &i.AreaDesc)
	return i, err
}

const listAreas = `-- name: ListAreas :many
SELECT id, area_name, area_desc FROM areas
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListAreasParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListAreas(ctx context.Context, arg ListAreasParams) ([]Area, error) {
	rows, err := q.db.Query(ctx, listAreas, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Area{}
	for rows.Next() {
		var i Area
		if err := rows.Scan(&i.ID, &i.AreaName, &i.AreaDesc); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateArea = `-- name: UpdateArea :one
UPDATE areas
SET area_name = $2,
area_desc = $3
WHERE id = $1
RETURNING id, area_name, area_desc
`

type UpdateAreaParams struct {
	ID       int64  `json:"id"`
	AreaName string `json:"area_name"`
	AreaDesc string `json:"area_desc"`
}

func (q *Queries) UpdateArea(ctx context.Context, arg UpdateAreaParams) (Area, error) {
	row := q.db.QueryRow(ctx, updateArea, arg.ID, arg.AreaName, arg.AreaDesc)
	var i Area
	err := row.Scan(&i.ID, &i.AreaName, &i.AreaDesc)
	return i, err
}
