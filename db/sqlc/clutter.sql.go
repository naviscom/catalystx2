// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: clutter.sql

package db

import (
	"context"
)

const createClutter = `-- name: CreateClutter :one
INSERT INTO clutters (
    clutter_name,
    clutter_desc
) VALUES (
 $1, $2
)
RETURNING id, clutter_name, clutter_desc
`

type CreateClutterParams struct {
	ClutterName string `json:"clutter_name"`
	ClutterDesc string `json:"clutter_desc"`
}

func (q *Queries) CreateClutter(ctx context.Context, arg CreateClutterParams) (Clutter, error) {
	row := q.db.QueryRow(ctx, createClutter, arg.ClutterName, arg.ClutterDesc)
	var i Clutter
	err := row.Scan(&i.ID, &i.ClutterName, &i.ClutterDesc)
	return i, err
}

const deleteClutter = `-- name: DeleteClutter :exec
DELETE FROM clutters
WHERE id = $1
`

func (q *Queries) DeleteClutter(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteClutter, id)
	return err
}

const getClutter0 = `-- name: GetClutter0 :one
SELECT id, clutter_name, clutter_desc FROM clutters
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetClutter0(ctx context.Context, id int64) (Clutter, error) {
	row := q.db.QueryRow(ctx, getClutter0, id)
	var i Clutter
	err := row.Scan(&i.ID, &i.ClutterName, &i.ClutterDesc)
	return i, err
}

const getClutter1 = `-- name: GetClutter1 :one
SELECT id, clutter_name, clutter_desc FROM clutters
WHERE clutter_name = $1 LIMIT 1
`

func (q *Queries) GetClutter1(ctx context.Context, clutterName string) (Clutter, error) {
	row := q.db.QueryRow(ctx, getClutter1, clutterName)
	var i Clutter
	err := row.Scan(&i.ID, &i.ClutterName, &i.ClutterDesc)
	return i, err
}

const listClutters = `-- name: ListClutters :many
SELECT id, clutter_name, clutter_desc FROM clutters
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListCluttersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListClutters(ctx context.Context, arg ListCluttersParams) ([]Clutter, error) {
	rows, err := q.db.Query(ctx, listClutters, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Clutter{}
	for rows.Next() {
		var i Clutter
		if err := rows.Scan(&i.ID, &i.ClutterName, &i.ClutterDesc); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateClutter = `-- name: UpdateClutter :one
UPDATE clutters
SET clutter_name = $2,
clutter_desc = $3
WHERE id = $1
RETURNING id, clutter_name, clutter_desc
`

type UpdateClutterParams struct {
	ID          int64  `json:"id"`
	ClutterName string `json:"clutter_name"`
	ClutterDesc string `json:"clutter_desc"`
}

func (q *Queries) UpdateClutter(ctx context.Context, arg UpdateClutterParams) (Clutter, error) {
	row := q.db.QueryRow(ctx, updateClutter, arg.ID, arg.ClutterName, arg.ClutterDesc)
	var i Clutter
	err := row.Scan(&i.ID, &i.ClutterName, &i.ClutterDesc)
	return i, err
}
