// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: property.sql

package db

import (
	"context"
)

const createProperty = `-- name: CreateProperty :one
INSERT INTO properties (
    property_name,
    lat,
    long,
    block_id
) VALUES (
 $1, $2, $3, $4
)
RETURNING id, property_name, lat, long, block_id
`

type CreatePropertyParams struct {
	PropertyName string  `json:"property_name"`
	Lat          float32 `json:"lat"`
	Long         float32 `json:"long"`
	BlockID      int64   `json:"block_id"`
}

func (q *Queries) CreateProperty(ctx context.Context, arg CreatePropertyParams) (Property, error) {
	row := q.db.QueryRow(ctx, createProperty,
		arg.PropertyName,
		arg.Lat,
		arg.Long,
		arg.BlockID,
	)
	var i Property
	err := row.Scan(
		&i.ID,
		&i.PropertyName,
		&i.Lat,
		&i.Long,
		&i.BlockID,
	)
	return i, err
}

const deleteProperty = `-- name: DeleteProperty :exec
DELETE FROM properties
WHERE id = $1
`

func (q *Queries) DeleteProperty(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteProperty, id)
	return err
}

const getProperty0 = `-- name: GetProperty0 :one
SELECT id, property_name, lat, long, block_id FROM properties
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetProperty0(ctx context.Context, id int64) (Property, error) {
	row := q.db.QueryRow(ctx, getProperty0, id)
	var i Property
	err := row.Scan(
		&i.ID,
		&i.PropertyName,
		&i.Lat,
		&i.Long,
		&i.BlockID,
	)
	return i, err
}

const getProperty1 = `-- name: GetProperty1 :one
SELECT id, property_name, lat, long, block_id FROM properties
WHERE property_name = $1 LIMIT 1
`

func (q *Queries) GetProperty1(ctx context.Context, propertyName string) (Property, error) {
	row := q.db.QueryRow(ctx, getProperty1, propertyName)
	var i Property
	err := row.Scan(
		&i.ID,
		&i.PropertyName,
		&i.Lat,
		&i.Long,
		&i.BlockID,
	)
	return i, err
}

const listProperties = `-- name: ListProperties :many
SELECT id, property_name, lat, long, block_id FROM properties
WHERE block_id = $3
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListPropertiesParams struct {
	Limit   int32 `json:"limit"`
	Offset  int32 `json:"offset"`
	BlockID int64 `json:"block_id"`
}

func (q *Queries) ListProperties(ctx context.Context, arg ListPropertiesParams) ([]Property, error) {
	rows, err := q.db.Query(ctx, listProperties, arg.Limit, arg.Offset, arg.BlockID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Property{}
	for rows.Next() {
		var i Property
		if err := rows.Scan(
			&i.ID,
			&i.PropertyName,
			&i.Lat,
			&i.Long,
			&i.BlockID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProperty = `-- name: UpdateProperty :one
UPDATE properties
SET property_name = $2,
lat = $3,
long = $4,
block_id = $5
WHERE id = $1
RETURNING id, property_name, lat, long, block_id
`

type UpdatePropertyParams struct {
	ID           int64   `json:"id"`
	PropertyName string  `json:"property_name"`
	Lat          float32 `json:"lat"`
	Long         float32 `json:"long"`
	BlockID      int64   `json:"block_id"`
}

func (q *Queries) UpdateProperty(ctx context.Context, arg UpdatePropertyParams) (Property, error) {
	row := q.db.QueryRow(ctx, updateProperty,
		arg.ID,
		arg.PropertyName,
		arg.Lat,
		arg.Long,
		arg.BlockID,
	)
	var i Property
	err := row.Scan(
		&i.ID,
		&i.PropertyName,
		&i.Lat,
		&i.Long,
		&i.BlockID,
	)
	return i, err
}
