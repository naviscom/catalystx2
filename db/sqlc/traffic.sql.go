// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: traffic.sql

package db

import (
	"context"
	"time"
)

const createTraffic = `-- name: CreateTraffic :one
INSERT INTO traffic (
    traffic_date,
    avgdailydldatamb,
    avgdailyuldatamb,
    avgdailytotdatamb,
    avgdailytotvoicemin,
    avgdailytotvideomin,
    qci1_data,
    qci6_data,
    qci8_data,
    qci_other_data,
    avgdailytotvoicemin4g,
    avgdailytotvoicemintotal,
    userdlthroughput,
    dlpacketlossrate,
    overallpsdropcallrate,
    bhdldatamb,
    bhupdatamb,
    bhtotdatamb,
    bhtotvoicemin,
    bhtotvideomin,
    bhcsusers,
    bhhsupausers,
    bhhsdpausers,
    bhr99uldl,
    powercapacity,
    powerutilization,
    codecapacity,
    codeutilization,
    ceulcapacity,
    ceulutilization,
    cedlcapacity,
    cedlutilization,
    iubcapacity,
    iubutlization,
    bhrrcusers,
    cell_id
) VALUES (
 $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36
)
RETURNING id, traffic_date, avgdailydldatamb, avgdailyuldatamb, avgdailytotdatamb, avgdailytotvoicemin, avgdailytotvideomin, qci1_data, qci6_data, qci8_data, qci_other_data, avgdailytotvoicemin4g, avgdailytotvoicemintotal, userdlthroughput, dlpacketlossrate, overallpsdropcallrate, bhdldatamb, bhupdatamb, bhtotdatamb, bhtotvoicemin, bhtotvideomin, bhcsusers, bhhsupausers, bhhsdpausers, bhr99uldl, powercapacity, powerutilization, codecapacity, codeutilization, ceulcapacity, ceulutilization, cedlcapacity, cedlutilization, iubcapacity, iubutlization, bhrrcusers, cell_id
`

type CreateTrafficParams struct {
	TrafficDate              time.Time `json:"traffic_date"`
	Avgdailydldatamb         float32   `json:"avgdailydldatamb"`
	Avgdailyuldatamb         float32   `json:"avgdailyuldatamb"`
	Avgdailytotdatamb        float32   `json:"avgdailytotdatamb"`
	Avgdailytotvoicemin      float32   `json:"avgdailytotvoicemin"`
	Avgdailytotvideomin      float32   `json:"avgdailytotvideomin"`
	Qci1Data                 float32   `json:"qci1_data"`
	Qci6Data                 float32   `json:"qci6_data"`
	Qci8Data                 float32   `json:"qci8_data"`
	QciOtherData             float32   `json:"qci_other_data"`
	Avgdailytotvoicemin4g    float32   `json:"avgdailytotvoicemin4g"`
	Avgdailytotvoicemintotal float32   `json:"avgdailytotvoicemintotal"`
	Userdlthroughput         float32   `json:"userdlthroughput"`
	Dlpacketlossrate         float32   `json:"dlpacketlossrate"`
	Overallpsdropcallrate    float32   `json:"overallpsdropcallrate"`
	Bhdldatamb               float32   `json:"bhdldatamb"`
	Bhupdatamb               float32   `json:"bhupdatamb"`
	Bhtotdatamb              float32   `json:"bhtotdatamb"`
	Bhtotvoicemin            float32   `json:"bhtotvoicemin"`
	Bhtotvideomin            float32   `json:"bhtotvideomin"`
	Bhcsusers                float32   `json:"bhcsusers"`
	Bhhsupausers             float32   `json:"bhhsupausers"`
	Bhhsdpausers             float32   `json:"bhhsdpausers"`
	Bhr99uldl                float32   `json:"bhr99uldl"`
	Powercapacity            float32   `json:"powercapacity"`
	Powerutilization         float32   `json:"powerutilization"`
	Codecapacity             float32   `json:"codecapacity"`
	Codeutilization          float32   `json:"codeutilization"`
	Ceulcapacity             float32   `json:"ceulcapacity"`
	Ceulutilization          float32   `json:"ceulutilization"`
	Cedlcapacity             float32   `json:"cedlcapacity"`
	Cedlutilization          float32   `json:"cedlutilization"`
	Iubcapacity              float32   `json:"iubcapacity"`
	Iubutlization            float32   `json:"iubutlization"`
	Bhrrcusers               float32   `json:"bhrrcusers"`
	CellID                   int64     `json:"cell_id"`
}

func (q *Queries) CreateTraffic(ctx context.Context, arg CreateTrafficParams) (Traffic, error) {
	row := q.db.QueryRow(ctx, createTraffic,
		arg.TrafficDate,
		arg.Avgdailydldatamb,
		arg.Avgdailyuldatamb,
		arg.Avgdailytotdatamb,
		arg.Avgdailytotvoicemin,
		arg.Avgdailytotvideomin,
		arg.Qci1Data,
		arg.Qci6Data,
		arg.Qci8Data,
		arg.QciOtherData,
		arg.Avgdailytotvoicemin4g,
		arg.Avgdailytotvoicemintotal,
		arg.Userdlthroughput,
		arg.Dlpacketlossrate,
		arg.Overallpsdropcallrate,
		arg.Bhdldatamb,
		arg.Bhupdatamb,
		arg.Bhtotdatamb,
		arg.Bhtotvoicemin,
		arg.Bhtotvideomin,
		arg.Bhcsusers,
		arg.Bhhsupausers,
		arg.Bhhsdpausers,
		arg.Bhr99uldl,
		arg.Powercapacity,
		arg.Powerutilization,
		arg.Codecapacity,
		arg.Codeutilization,
		arg.Ceulcapacity,
		arg.Ceulutilization,
		arg.Cedlcapacity,
		arg.Cedlutilization,
		arg.Iubcapacity,
		arg.Iubutlization,
		arg.Bhrrcusers,
		arg.CellID,
	)
	var i Traffic
	err := row.Scan(
		&i.ID,
		&i.TrafficDate,
		&i.Avgdailydldatamb,
		&i.Avgdailyuldatamb,
		&i.Avgdailytotdatamb,
		&i.Avgdailytotvoicemin,
		&i.Avgdailytotvideomin,
		&i.Qci1Data,
		&i.Qci6Data,
		&i.Qci8Data,
		&i.QciOtherData,
		&i.Avgdailytotvoicemin4g,
		&i.Avgdailytotvoicemintotal,
		&i.Userdlthroughput,
		&i.Dlpacketlossrate,
		&i.Overallpsdropcallrate,
		&i.Bhdldatamb,
		&i.Bhupdatamb,
		&i.Bhtotdatamb,
		&i.Bhtotvoicemin,
		&i.Bhtotvideomin,
		&i.Bhcsusers,
		&i.Bhhsupausers,
		&i.Bhhsdpausers,
		&i.Bhr99uldl,
		&i.Powercapacity,
		&i.Powerutilization,
		&i.Codecapacity,
		&i.Codeutilization,
		&i.Ceulcapacity,
		&i.Ceulutilization,
		&i.Cedlcapacity,
		&i.Cedlutilization,
		&i.Iubcapacity,
		&i.Iubutlization,
		&i.Bhrrcusers,
		&i.CellID,
	)
	return i, err
}

const deleteTraffic = `-- name: DeleteTraffic :exec
DELETE FROM traffic
WHERE id = $1
`

func (q *Queries) DeleteTraffic(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteTraffic, id)
	return err
}

const getTraffic0 = `-- name: GetTraffic0 :one
SELECT id, traffic_date, avgdailydldatamb, avgdailyuldatamb, avgdailytotdatamb, avgdailytotvoicemin, avgdailytotvideomin, qci1_data, qci6_data, qci8_data, qci_other_data, avgdailytotvoicemin4g, avgdailytotvoicemintotal, userdlthroughput, dlpacketlossrate, overallpsdropcallrate, bhdldatamb, bhupdatamb, bhtotdatamb, bhtotvoicemin, bhtotvideomin, bhcsusers, bhhsupausers, bhhsdpausers, bhr99uldl, powercapacity, powerutilization, codecapacity, codeutilization, ceulcapacity, ceulutilization, cedlcapacity, cedlutilization, iubcapacity, iubutlization, bhrrcusers, cell_id FROM traffic
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTraffic0(ctx context.Context, id int64) (Traffic, error) {
	row := q.db.QueryRow(ctx, getTraffic0, id)
	var i Traffic
	err := row.Scan(
		&i.ID,
		&i.TrafficDate,
		&i.Avgdailydldatamb,
		&i.Avgdailyuldatamb,
		&i.Avgdailytotdatamb,
		&i.Avgdailytotvoicemin,
		&i.Avgdailytotvideomin,
		&i.Qci1Data,
		&i.Qci6Data,
		&i.Qci8Data,
		&i.QciOtherData,
		&i.Avgdailytotvoicemin4g,
		&i.Avgdailytotvoicemintotal,
		&i.Userdlthroughput,
		&i.Dlpacketlossrate,
		&i.Overallpsdropcallrate,
		&i.Bhdldatamb,
		&i.Bhupdatamb,
		&i.Bhtotdatamb,
		&i.Bhtotvoicemin,
		&i.Bhtotvideomin,
		&i.Bhcsusers,
		&i.Bhhsupausers,
		&i.Bhhsdpausers,
		&i.Bhr99uldl,
		&i.Powercapacity,
		&i.Powerutilization,
		&i.Codecapacity,
		&i.Codeutilization,
		&i.Ceulcapacity,
		&i.Ceulutilization,
		&i.Cedlcapacity,
		&i.Cedlutilization,
		&i.Iubcapacity,
		&i.Iubutlization,
		&i.Bhrrcusers,
		&i.CellID,
	)
	return i, err
}

const listTraffic = `-- name: ListTraffic :many
SELECT id, traffic_date, avgdailydldatamb, avgdailyuldatamb, avgdailytotdatamb, avgdailytotvoicemin, avgdailytotvideomin, qci1_data, qci6_data, qci8_data, qci_other_data, avgdailytotvoicemin4g, avgdailytotvoicemintotal, userdlthroughput, dlpacketlossrate, overallpsdropcallrate, bhdldatamb, bhupdatamb, bhtotdatamb, bhtotvoicemin, bhtotvideomin, bhcsusers, bhhsupausers, bhhsdpausers, bhr99uldl, powercapacity, powerutilization, codecapacity, codeutilization, ceulcapacity, ceulutilization, cedlcapacity, cedlutilization, iubcapacity, iubutlization, bhrrcusers, cell_id FROM traffic
WHERE cell_id = $3
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListTrafficParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
	CellID int64 `json:"cell_id"`
}

func (q *Queries) ListTraffic(ctx context.Context, arg ListTrafficParams) ([]Traffic, error) {
	rows, err := q.db.Query(ctx, listTraffic, arg.Limit, arg.Offset, arg.CellID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Traffic{}
	for rows.Next() {
		var i Traffic
		if err := rows.Scan(
			&i.ID,
			&i.TrafficDate,
			&i.Avgdailydldatamb,
			&i.Avgdailyuldatamb,
			&i.Avgdailytotdatamb,
			&i.Avgdailytotvoicemin,
			&i.Avgdailytotvideomin,
			&i.Qci1Data,
			&i.Qci6Data,
			&i.Qci8Data,
			&i.QciOtherData,
			&i.Avgdailytotvoicemin4g,
			&i.Avgdailytotvoicemintotal,
			&i.Userdlthroughput,
			&i.Dlpacketlossrate,
			&i.Overallpsdropcallrate,
			&i.Bhdldatamb,
			&i.Bhupdatamb,
			&i.Bhtotdatamb,
			&i.Bhtotvoicemin,
			&i.Bhtotvideomin,
			&i.Bhcsusers,
			&i.Bhhsupausers,
			&i.Bhhsdpausers,
			&i.Bhr99uldl,
			&i.Powercapacity,
			&i.Powerutilization,
			&i.Codecapacity,
			&i.Codeutilization,
			&i.Ceulcapacity,
			&i.Ceulutilization,
			&i.Cedlcapacity,
			&i.Cedlutilization,
			&i.Iubcapacity,
			&i.Iubutlization,
			&i.Bhrrcusers,
			&i.CellID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTraffic = `-- name: UpdateTraffic :one
UPDATE traffic
SET traffic_date = $2,
avgdailydldatamb = $3,
avgdailyuldatamb = $4,
avgdailytotdatamb = $5,
avgdailytotvoicemin = $6,
avgdailytotvideomin = $7,
qci1_data = $8,
qci6_data = $9,
qci8_data = $10,
qci_other_data = $11,
avgdailytotvoicemin4g = $12,
avgdailytotvoicemintotal = $13,
userdlthroughput = $14,
dlpacketlossrate = $15,
overallpsdropcallrate = $16,
bhdldatamb = $17,
bhupdatamb = $18,
bhtotdatamb = $19,
bhtotvoicemin = $20,
bhtotvideomin = $21,
bhcsusers = $22,
bhhsupausers = $23,
bhhsdpausers = $24,
bhr99uldl = $25,
powercapacity = $26,
powerutilization = $27,
codecapacity = $28,
codeutilization = $29,
ceulcapacity = $30,
ceulutilization = $31,
cedlcapacity = $32,
cedlutilization = $33,
iubcapacity = $34,
iubutlization = $35,
bhrrcusers = $36,
cell_id = $37
WHERE id = $1
RETURNING id, traffic_date, avgdailydldatamb, avgdailyuldatamb, avgdailytotdatamb, avgdailytotvoicemin, avgdailytotvideomin, qci1_data, qci6_data, qci8_data, qci_other_data, avgdailytotvoicemin4g, avgdailytotvoicemintotal, userdlthroughput, dlpacketlossrate, overallpsdropcallrate, bhdldatamb, bhupdatamb, bhtotdatamb, bhtotvoicemin, bhtotvideomin, bhcsusers, bhhsupausers, bhhsdpausers, bhr99uldl, powercapacity, powerutilization, codecapacity, codeutilization, ceulcapacity, ceulutilization, cedlcapacity, cedlutilization, iubcapacity, iubutlization, bhrrcusers, cell_id
`

type UpdateTrafficParams struct {
	ID                       int64     `json:"id"`
	TrafficDate              time.Time `json:"traffic_date"`
	Avgdailydldatamb         float32   `json:"avgdailydldatamb"`
	Avgdailyuldatamb         float32   `json:"avgdailyuldatamb"`
	Avgdailytotdatamb        float32   `json:"avgdailytotdatamb"`
	Avgdailytotvoicemin      float32   `json:"avgdailytotvoicemin"`
	Avgdailytotvideomin      float32   `json:"avgdailytotvideomin"`
	Qci1Data                 float32   `json:"qci1_data"`
	Qci6Data                 float32   `json:"qci6_data"`
	Qci8Data                 float32   `json:"qci8_data"`
	QciOtherData             float32   `json:"qci_other_data"`
	Avgdailytotvoicemin4g    float32   `json:"avgdailytotvoicemin4g"`
	Avgdailytotvoicemintotal float32   `json:"avgdailytotvoicemintotal"`
	Userdlthroughput         float32   `json:"userdlthroughput"`
	Dlpacketlossrate         float32   `json:"dlpacketlossrate"`
	Overallpsdropcallrate    float32   `json:"overallpsdropcallrate"`
	Bhdldatamb               float32   `json:"bhdldatamb"`
	Bhupdatamb               float32   `json:"bhupdatamb"`
	Bhtotdatamb              float32   `json:"bhtotdatamb"`
	Bhtotvoicemin            float32   `json:"bhtotvoicemin"`
	Bhtotvideomin            float32   `json:"bhtotvideomin"`
	Bhcsusers                float32   `json:"bhcsusers"`
	Bhhsupausers             float32   `json:"bhhsupausers"`
	Bhhsdpausers             float32   `json:"bhhsdpausers"`
	Bhr99uldl                float32   `json:"bhr99uldl"`
	Powercapacity            float32   `json:"powercapacity"`
	Powerutilization         float32   `json:"powerutilization"`
	Codecapacity             float32   `json:"codecapacity"`
	Codeutilization          float32   `json:"codeutilization"`
	Ceulcapacity             float32   `json:"ceulcapacity"`
	Ceulutilization          float32   `json:"ceulutilization"`
	Cedlcapacity             float32   `json:"cedlcapacity"`
	Cedlutilization          float32   `json:"cedlutilization"`
	Iubcapacity              float32   `json:"iubcapacity"`
	Iubutlization            float32   `json:"iubutlization"`
	Bhrrcusers               float32   `json:"bhrrcusers"`
	CellID                   int64     `json:"cell_id"`
}

func (q *Queries) UpdateTraffic(ctx context.Context, arg UpdateTrafficParams) (Traffic, error) {
	row := q.db.QueryRow(ctx, updateTraffic,
		arg.ID,
		arg.TrafficDate,
		arg.Avgdailydldatamb,
		arg.Avgdailyuldatamb,
		arg.Avgdailytotdatamb,
		arg.Avgdailytotvoicemin,
		arg.Avgdailytotvideomin,
		arg.Qci1Data,
		arg.Qci6Data,
		arg.Qci8Data,
		arg.QciOtherData,
		arg.Avgdailytotvoicemin4g,
		arg.Avgdailytotvoicemintotal,
		arg.Userdlthroughput,
		arg.Dlpacketlossrate,
		arg.Overallpsdropcallrate,
		arg.Bhdldatamb,
		arg.Bhupdatamb,
		arg.Bhtotdatamb,
		arg.Bhtotvoicemin,
		arg.Bhtotvideomin,
		arg.Bhcsusers,
		arg.Bhhsupausers,
		arg.Bhhsdpausers,
		arg.Bhr99uldl,
		arg.Powercapacity,
		arg.Powerutilization,
		arg.Codecapacity,
		arg.Codeutilization,
		arg.Ceulcapacity,
		arg.Ceulutilization,
		arg.Cedlcapacity,
		arg.Cedlutilization,
		arg.Iubcapacity,
		arg.Iubutlization,
		arg.Bhrrcusers,
		arg.CellID,
	)
	var i Traffic
	err := row.Scan(
		&i.ID,
		&i.TrafficDate,
		&i.Avgdailydldatamb,
		&i.Avgdailyuldatamb,
		&i.Avgdailytotdatamb,
		&i.Avgdailytotvoicemin,
		&i.Avgdailytotvideomin,
		&i.Qci1Data,
		&i.Qci6Data,
		&i.Qci8Data,
		&i.QciOtherData,
		&i.Avgdailytotvoicemin4g,
		&i.Avgdailytotvoicemintotal,
		&i.Userdlthroughput,
		&i.Dlpacketlossrate,
		&i.Overallpsdropcallrate,
		&i.Bhdldatamb,
		&i.Bhupdatamb,
		&i.Bhtotdatamb,
		&i.Bhtotvoicemin,
		&i.Bhtotvideomin,
		&i.Bhcsusers,
		&i.Bhhsupausers,
		&i.Bhhsdpausers,
		&i.Bhr99uldl,
		&i.Powercapacity,
		&i.Powerutilization,
		&i.Codecapacity,
		&i.Codeutilization,
		&i.Ceulcapacity,
		&i.Ceulutilization,
		&i.Cedlcapacity,
		&i.Cedlutilization,
		&i.Iubcapacity,
		&i.Iubutlization,
		&i.Bhrrcusers,
		&i.CellID,
	)
	return i, err
}
