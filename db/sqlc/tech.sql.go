// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: tech.sql

package db

import (
	"context"
)

const createTech = `-- name: CreateTech :one
INSERT INTO techs (
    tech_name,
    tech_desc
) VALUES (
 $1, $2
)
RETURNING id, tech_name, tech_desc
`

type CreateTechParams struct {
	TechName string `json:"tech_name"`
	TechDesc string `json:"tech_desc"`
}

func (q *Queries) CreateTech(ctx context.Context, arg CreateTechParams) (Tech, error) {
	row := q.db.QueryRow(ctx, createTech, arg.TechName, arg.TechDesc)
	var i Tech
	err := row.Scan(&i.ID, &i.TechName, &i.TechDesc)
	return i, err
}

const deleteTech = `-- name: DeleteTech :exec
DELETE FROM techs
WHERE id = $1
`

func (q *Queries) DeleteTech(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteTech, id)
	return err
}

const getTech0 = `-- name: GetTech0 :one
SELECT id, tech_name, tech_desc FROM techs
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTech0(ctx context.Context, id int64) (Tech, error) {
	row := q.db.QueryRow(ctx, getTech0, id)
	var i Tech
	err := row.Scan(&i.ID, &i.TechName, &i.TechDesc)
	return i, err
}

const getTech1 = `-- name: GetTech1 :one
SELECT id, tech_name, tech_desc FROM techs
WHERE tech_name = $1 LIMIT 1
`

func (q *Queries) GetTech1(ctx context.Context, techName string) (Tech, error) {
	row := q.db.QueryRow(ctx, getTech1, techName)
	var i Tech
	err := row.Scan(&i.ID, &i.TechName, &i.TechDesc)
	return i, err
}

const listTechs = `-- name: ListTechs :many
SELECT id, tech_name, tech_desc FROM techs
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListTechsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListTechs(ctx context.Context, arg ListTechsParams) ([]Tech, error) {
	rows, err := q.db.Query(ctx, listTechs, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Tech{}
	for rows.Next() {
		var i Tech
		if err := rows.Scan(&i.ID, &i.TechName, &i.TechDesc); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTech = `-- name: UpdateTech :one
UPDATE techs
SET tech_name = $2,
tech_desc = $3
WHERE id = $1
RETURNING id, tech_name, tech_desc
`

type UpdateTechParams struct {
	ID       int64  `json:"id"`
	TechName string `json:"tech_name"`
	TechDesc string `json:"tech_desc"`
}

func (q *Queries) UpdateTech(ctx context.Context, arg UpdateTechParams) (Tech, error) {
	row := q.db.QueryRow(ctx, updateTech, arg.ID, arg.TechName, arg.TechDesc)
	var i Tech
	err := row.Scan(&i.ID, &i.TechName, &i.TechDesc)
	return i, err
}
