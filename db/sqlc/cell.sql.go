// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: cell.sql

package db

import (
	"context"
)

const createCell = `-- name: CreateCell :one
INSERT INTO cells (
    cell_name,
    cell_name_old,
    cell_id_givin,
    cell_id_givin_old,
    sector_name,
    uplinkuarfcn,
    downlinkuarfcn,
    dlprscramblecode,
    azimuth,
    height,
    etilt,
    mtilt,
    antennatype,
    antennamodel,
    ecgi,
    site_id,
    carrier_id,
    serviceareatype_id
) VALUES (
 $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18
)
RETURNING id, cell_name, cell_name_old, cell_id_givin, cell_id_givin_old, sector_name, uplinkuarfcn, downlinkuarfcn, dlprscramblecode, azimuth, height, etilt, mtilt, antennatype, antennamodel, ecgi, site_id, carrier_id, serviceareatype_id
`

type CreateCellParams struct {
	CellName          string `json:"cell_name"`
	CellNameOld       string `json:"cell_name_old"`
	CellIDGivin       string `json:"cell_id_givin"`
	CellIDGivinOld    string `json:"cell_id_givin_old"`
	SectorName        string `json:"sector_name"`
	Uplinkuarfcn      string `json:"uplinkuarfcn"`
	Downlinkuarfcn    string `json:"downlinkuarfcn"`
	Dlprscramblecode  string `json:"dlprscramblecode"`
	Azimuth           string `json:"azimuth"`
	Height            string `json:"height"`
	Etilt             string `json:"etilt"`
	Mtilt             string `json:"mtilt"`
	Antennatype       string `json:"antennatype"`
	Antennamodel      string `json:"antennamodel"`
	Ecgi              string `json:"ecgi"`
	SiteID            int64  `json:"site_id"`
	CarrierID         int64  `json:"carrier_id"`
	ServiceareatypeID int64  `json:"serviceareatype_id"`
}

func (q *Queries) CreateCell(ctx context.Context, arg CreateCellParams) (Cell, error) {
	row := q.db.QueryRow(ctx, createCell,
		arg.CellName,
		arg.CellNameOld,
		arg.CellIDGivin,
		arg.CellIDGivinOld,
		arg.SectorName,
		arg.Uplinkuarfcn,
		arg.Downlinkuarfcn,
		arg.Dlprscramblecode,
		arg.Azimuth,
		arg.Height,
		arg.Etilt,
		arg.Mtilt,
		arg.Antennatype,
		arg.Antennamodel,
		arg.Ecgi,
		arg.SiteID,
		arg.CarrierID,
		arg.ServiceareatypeID,
	)
	var i Cell
	err := row.Scan(
		&i.ID,
		&i.CellName,
		&i.CellNameOld,
		&i.CellIDGivin,
		&i.CellIDGivinOld,
		&i.SectorName,
		&i.Uplinkuarfcn,
		&i.Downlinkuarfcn,
		&i.Dlprscramblecode,
		&i.Azimuth,
		&i.Height,
		&i.Etilt,
		&i.Mtilt,
		&i.Antennatype,
		&i.Antennamodel,
		&i.Ecgi,
		&i.SiteID,
		&i.CarrierID,
		&i.ServiceareatypeID,
	)
	return i, err
}

const deleteCell = `-- name: DeleteCell :exec
DELETE FROM cells
WHERE id = $1
`

func (q *Queries) DeleteCell(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteCell, id)
	return err
}

const getCell0 = `-- name: GetCell0 :one
SELECT id, cell_name, cell_name_old, cell_id_givin, cell_id_givin_old, sector_name, uplinkuarfcn, downlinkuarfcn, dlprscramblecode, azimuth, height, etilt, mtilt, antennatype, antennamodel, ecgi, site_id, carrier_id, serviceareatype_id FROM cells
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetCell0(ctx context.Context, id int64) (Cell, error) {
	row := q.db.QueryRow(ctx, getCell0, id)
	var i Cell
	err := row.Scan(
		&i.ID,
		&i.CellName,
		&i.CellNameOld,
		&i.CellIDGivin,
		&i.CellIDGivinOld,
		&i.SectorName,
		&i.Uplinkuarfcn,
		&i.Downlinkuarfcn,
		&i.Dlprscramblecode,
		&i.Azimuth,
		&i.Height,
		&i.Etilt,
		&i.Mtilt,
		&i.Antennatype,
		&i.Antennamodel,
		&i.Ecgi,
		&i.SiteID,
		&i.CarrierID,
		&i.ServiceareatypeID,
	)
	return i, err
}

const getCell1 = `-- name: GetCell1 :one
SELECT id, cell_name, cell_name_old, cell_id_givin, cell_id_givin_old, sector_name, uplinkuarfcn, downlinkuarfcn, dlprscramblecode, azimuth, height, etilt, mtilt, antennatype, antennamodel, ecgi, site_id, carrier_id, serviceareatype_id FROM cells
WHERE cell_name = $1 LIMIT 1
`

func (q *Queries) GetCell1(ctx context.Context, cellName string) (Cell, error) {
	row := q.db.QueryRow(ctx, getCell1, cellName)
	var i Cell
	err := row.Scan(
		&i.ID,
		&i.CellName,
		&i.CellNameOld,
		&i.CellIDGivin,
		&i.CellIDGivinOld,
		&i.SectorName,
		&i.Uplinkuarfcn,
		&i.Downlinkuarfcn,
		&i.Dlprscramblecode,
		&i.Azimuth,
		&i.Height,
		&i.Etilt,
		&i.Mtilt,
		&i.Antennatype,
		&i.Antennamodel,
		&i.Ecgi,
		&i.SiteID,
		&i.CarrierID,
		&i.ServiceareatypeID,
	)
	return i, err
}

const listCells = `-- name: ListCells :many
SELECT id, cell_name, cell_name_old, cell_id_givin, cell_id_givin_old, sector_name, uplinkuarfcn, downlinkuarfcn, dlprscramblecode, azimuth, height, etilt, mtilt, antennatype, antennamodel, ecgi, site_id, carrier_id, serviceareatype_id FROM cells
WHERE site_id = $3 OR carrier_id = $4 OR serviceareatype_id = $5
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListCellsParams struct {
	Limit             int32 `json:"limit"`
	Offset            int32 `json:"offset"`
	SiteID            int64 `json:"site_id"`
	CarrierID         int64 `json:"carrier_id"`
	ServiceareatypeID int64 `json:"serviceareatype_id"`
}

func (q *Queries) ListCells(ctx context.Context, arg ListCellsParams) ([]Cell, error) {
	rows, err := q.db.Query(ctx, listCells,
		arg.Limit,
		arg.Offset,
		arg.SiteID,
		arg.CarrierID,
		arg.ServiceareatypeID,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Cell{}
	for rows.Next() {
		var i Cell
		if err := rows.Scan(
			&i.ID,
			&i.CellName,
			&i.CellNameOld,
			&i.CellIDGivin,
			&i.CellIDGivinOld,
			&i.SectorName,
			&i.Uplinkuarfcn,
			&i.Downlinkuarfcn,
			&i.Dlprscramblecode,
			&i.Azimuth,
			&i.Height,
			&i.Etilt,
			&i.Mtilt,
			&i.Antennatype,
			&i.Antennamodel,
			&i.Ecgi,
			&i.SiteID,
			&i.CarrierID,
			&i.ServiceareatypeID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCell = `-- name: UpdateCell :one
UPDATE cells
SET cell_name = $2,
cell_name_old = $3,
cell_id_givin = $4,
cell_id_givin_old = $5,
sector_name = $6,
uplinkuarfcn = $7,
downlinkuarfcn = $8,
dlprscramblecode = $9,
azimuth = $10,
height = $11,
etilt = $12,
mtilt = $13,
antennatype = $14,
antennamodel = $15,
ecgi = $16,
site_id = $17,
carrier_id = $18,
serviceareatype_id = $19
WHERE id = $1
RETURNING id, cell_name, cell_name_old, cell_id_givin, cell_id_givin_old, sector_name, uplinkuarfcn, downlinkuarfcn, dlprscramblecode, azimuth, height, etilt, mtilt, antennatype, antennamodel, ecgi, site_id, carrier_id, serviceareatype_id
`

type UpdateCellParams struct {
	ID                int64  `json:"id"`
	CellName          string `json:"cell_name"`
	CellNameOld       string `json:"cell_name_old"`
	CellIDGivin       string `json:"cell_id_givin"`
	CellIDGivinOld    string `json:"cell_id_givin_old"`
	SectorName        string `json:"sector_name"`
	Uplinkuarfcn      string `json:"uplinkuarfcn"`
	Downlinkuarfcn    string `json:"downlinkuarfcn"`
	Dlprscramblecode  string `json:"dlprscramblecode"`
	Azimuth           string `json:"azimuth"`
	Height            string `json:"height"`
	Etilt             string `json:"etilt"`
	Mtilt             string `json:"mtilt"`
	Antennatype       string `json:"antennatype"`
	Antennamodel      string `json:"antennamodel"`
	Ecgi              string `json:"ecgi"`
	SiteID            int64  `json:"site_id"`
	CarrierID         int64  `json:"carrier_id"`
	ServiceareatypeID int64  `json:"serviceareatype_id"`
}

func (q *Queries) UpdateCell(ctx context.Context, arg UpdateCellParams) (Cell, error) {
	row := q.db.QueryRow(ctx, updateCell,
		arg.ID,
		arg.CellName,
		arg.CellNameOld,
		arg.CellIDGivin,
		arg.CellIDGivinOld,
		arg.SectorName,
		arg.Uplinkuarfcn,
		arg.Downlinkuarfcn,
		arg.Dlprscramblecode,
		arg.Azimuth,
		arg.Height,
		arg.Etilt,
		arg.Mtilt,
		arg.Antennatype,
		arg.Antennamodel,
		arg.Ecgi,
		arg.SiteID,
		arg.CarrierID,
		arg.ServiceareatypeID,
	)
	var i Cell
	err := row.Scan(
		&i.ID,
		&i.CellName,
		&i.CellNameOld,
		&i.CellIDGivin,
		&i.CellIDGivinOld,
		&i.SectorName,
		&i.Uplinkuarfcn,
		&i.Downlinkuarfcn,
		&i.Dlprscramblecode,
		&i.Azimuth,
		&i.Height,
		&i.Etilt,
		&i.Mtilt,
		&i.Antennatype,
		&i.Antennamodel,
		&i.Ecgi,
		&i.SiteID,
		&i.CarrierID,
		&i.ServiceareatypeID,
	)
	return i, err
}
