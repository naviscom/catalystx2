// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: site.sql

package db

import (
	"context"
	"time"
)

const createSite = `-- name: CreateSite :one
INSERT INTO sites (
    site_name,
    site_name_old,
    site_id_givin,
    site_id_givin_old,
    lac,
    rac,
    rnc,
    site_on_air_date,
    property_id,
    sitetype_id,
    vendor_id
) VALUES (
 $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11
)
RETURNING id, site_name, site_name_old, site_id_givin, site_id_givin_old, lac, rac, rnc, site_on_air_date, property_id, sitetype_id, vendor_id
`

type CreateSiteParams struct {
	SiteName       string    `json:"site_name"`
	SiteNameOld    string    `json:"site_name_old"`
	SiteIDGivin    string    `json:"site_id_givin"`
	SiteIDGivinOld string    `json:"site_id_givin_old"`
	Lac            string    `json:"lac"`
	Rac            string    `json:"rac"`
	Rnc            string    `json:"rnc"`
	SiteOnAirDate  time.Time `json:"site_on_air_date"`
	PropertyID     int64     `json:"property_id"`
	SitetypeID     int64     `json:"sitetype_id"`
	VendorID       int64     `json:"vendor_id"`
}

func (q *Queries) CreateSite(ctx context.Context, arg CreateSiteParams) (Site, error) {
	row := q.db.QueryRow(ctx, createSite,
		arg.SiteName,
		arg.SiteNameOld,
		arg.SiteIDGivin,
		arg.SiteIDGivinOld,
		arg.Lac,
		arg.Rac,
		arg.Rnc,
		arg.SiteOnAirDate,
		arg.PropertyID,
		arg.SitetypeID,
		arg.VendorID,
	)
	var i Site
	err := row.Scan(
		&i.ID,
		&i.SiteName,
		&i.SiteNameOld,
		&i.SiteIDGivin,
		&i.SiteIDGivinOld,
		&i.Lac,
		&i.Rac,
		&i.Rnc,
		&i.SiteOnAirDate,
		&i.PropertyID,
		&i.SitetypeID,
		&i.VendorID,
	)
	return i, err
}

const deleteSite = `-- name: DeleteSite :exec
DELETE FROM sites
WHERE id = $1
`

func (q *Queries) DeleteSite(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteSite, id)
	return err
}

const getSite0 = `-- name: GetSite0 :one
SELECT id, site_name, site_name_old, site_id_givin, site_id_givin_old, lac, rac, rnc, site_on_air_date, property_id, sitetype_id, vendor_id FROM sites
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetSite0(ctx context.Context, id int64) (Site, error) {
	row := q.db.QueryRow(ctx, getSite0, id)
	var i Site
	err := row.Scan(
		&i.ID,
		&i.SiteName,
		&i.SiteNameOld,
		&i.SiteIDGivin,
		&i.SiteIDGivinOld,
		&i.Lac,
		&i.Rac,
		&i.Rnc,
		&i.SiteOnAirDate,
		&i.PropertyID,
		&i.SitetypeID,
		&i.VendorID,
	)
	return i, err
}

const getSite1 = `-- name: GetSite1 :one
SELECT id, site_name, site_name_old, site_id_givin, site_id_givin_old, lac, rac, rnc, site_on_air_date, property_id, sitetype_id, vendor_id FROM sites
WHERE site_name = $1 LIMIT 1
`

func (q *Queries) GetSite1(ctx context.Context, siteName string) (Site, error) {
	row := q.db.QueryRow(ctx, getSite1, siteName)
	var i Site
	err := row.Scan(
		&i.ID,
		&i.SiteName,
		&i.SiteNameOld,
		&i.SiteIDGivin,
		&i.SiteIDGivinOld,
		&i.Lac,
		&i.Rac,
		&i.Rnc,
		&i.SiteOnAirDate,
		&i.PropertyID,
		&i.SitetypeID,
		&i.VendorID,
	)
	return i, err
}

const listSites = `-- name: ListSites :many
SELECT id, site_name, site_name_old, site_id_givin, site_id_givin_old, lac, rac, rnc, site_on_air_date, property_id, sitetype_id, vendor_id FROM sites
WHERE property_id = $3 OR sitetype_id = $4 OR vendor_id = $5
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListSitesParams struct {
	Limit      int32 `json:"limit"`
	Offset     int32 `json:"offset"`
	PropertyID int64 `json:"property_id"`
	SitetypeID int64 `json:"sitetype_id"`
	VendorID   int64 `json:"vendor_id"`
}

func (q *Queries) ListSites(ctx context.Context, arg ListSitesParams) ([]Site, error) {
	rows, err := q.db.Query(ctx, listSites,
		arg.Limit,
		arg.Offset,
		arg.PropertyID,
		arg.SitetypeID,
		arg.VendorID,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Site{}
	for rows.Next() {
		var i Site
		if err := rows.Scan(
			&i.ID,
			&i.SiteName,
			&i.SiteNameOld,
			&i.SiteIDGivin,
			&i.SiteIDGivinOld,
			&i.Lac,
			&i.Rac,
			&i.Rnc,
			&i.SiteOnAirDate,
			&i.PropertyID,
			&i.SitetypeID,
			&i.VendorID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSite = `-- name: UpdateSite :one
UPDATE sites
SET site_name = $2,
site_name_old = $3,
site_id_givin = $4,
site_id_givin_old = $5,
lac = $6,
rac = $7,
rnc = $8,
site_on_air_date = $9,
property_id = $10,
sitetype_id = $11,
vendor_id = $12
WHERE id = $1
RETURNING id, site_name, site_name_old, site_id_givin, site_id_givin_old, lac, rac, rnc, site_on_air_date, property_id, sitetype_id, vendor_id
`

type UpdateSiteParams struct {
	ID             int64     `json:"id"`
	SiteName       string    `json:"site_name"`
	SiteNameOld    string    `json:"site_name_old"`
	SiteIDGivin    string    `json:"site_id_givin"`
	SiteIDGivinOld string    `json:"site_id_givin_old"`
	Lac            string    `json:"lac"`
	Rac            string    `json:"rac"`
	Rnc            string    `json:"rnc"`
	SiteOnAirDate  time.Time `json:"site_on_air_date"`
	PropertyID     int64     `json:"property_id"`
	SitetypeID     int64     `json:"sitetype_id"`
	VendorID       int64     `json:"vendor_id"`
}

func (q *Queries) UpdateSite(ctx context.Context, arg UpdateSiteParams) (Site, error) {
	row := q.db.QueryRow(ctx, updateSite,
		arg.ID,
		arg.SiteName,
		arg.SiteNameOld,
		arg.SiteIDGivin,
		arg.SiteIDGivinOld,
		arg.Lac,
		arg.Rac,
		arg.Rnc,
		arg.SiteOnAirDate,
		arg.PropertyID,
		arg.SitetypeID,
		arg.VendorID,
	)
	var i Site
	err := row.Scan(
		&i.ID,
		&i.SiteName,
		&i.SiteNameOld,
		&i.SiteIDGivin,
		&i.SiteIDGivinOld,
		&i.Lac,
		&i.Rac,
		&i.Rnc,
		&i.SiteOnAirDate,
		&i.PropertyID,
		&i.SitetypeID,
		&i.VendorID,
	)
	return i, err
}
